<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="https://pwang00.github.io//feed.xml" rel="self" type="application/atom+xml"/><link href="https://pwang00.github.io//" rel="alternate" type="text/html" hreflang="en"/><updated>2023-12-10T23:35:50-05:00</updated><id>https://pwang00.github.io//feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Vaulted (199) - JustCTF 2023</title><link href="https://pwang00.github.io//blog/2023/justctf-vaulted/" rel="alternate" type="text/html" title="Vaulted (199) - JustCTF 2023"/><published>2023-06-05T11:12:00-04:00</published><updated>2023-06-05T11:12:00-04:00</updated><id>https://pwang00.github.io//blog/2023/justctf-vaulted</id><content type="html" xml:base="https://pwang00.github.io//blog/2023/justctf-vaulted/"><![CDATA[<p>Vaulted was a cryptography challenge that was worth 199 points at the end of <a href="https://ctftime.org/event/1930/">JustCTF 2023</a>. You can download the original challenge <a href="https://pwang00.github.io/assets/challenges/justctf2023/crypto/vaulted.py">here.</a></p> <h2 id="problem-description">Problem Description</h2> <p>This secure multisignature application will keep our flag safe. Mind holding on to one of the backup keys?</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nc vaulted.nc.jctf.pro 1337
</code></pre></div></div> <h2 id="solution">Solution</h2> <p>Our goal is to access a secure vault that is protected by an ECDSA multisignature scheme over the elliptic curve secp256k1. The vault provides us with two important functions:</p> <ul> <li><code class="language-plaintext highlighter-rouge">enroll</code>, which provides us the opportunity to enroll a public key into the vault</li> <li><code class="language-plaintext highlighter-rouge">get_flag</code>, which lets us obtain the flag by submitting at least 3 distinct (public key, signature) pairs such that each signature for the string <code class="language-plaintext highlighter-rouge">'get_flag'</code> verifies under each public key and each public key is present in the vault</li> </ul> <p>This can be seen below:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">FlagVault</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">flag</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">flag</span> <span class="o">=</span> <span class="n">flag</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">pubkeys</span> <span class="o">=</span> <span class="p">[]</span>

    <span class="k">def</span> <span class="nf">get_keys</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">_data</span><span class="p">):</span>
        <span class="k">return</span> <span class="nb">str</span><span class="p">([</span><span class="n">pk</span><span class="p">.</span><span class="nb">format</span><span class="p">().</span><span class="nb">hex</span><span class="p">()</span> <span class="k">for</span> <span class="n">pk</span> <span class="ow">in</span> <span class="bp">self</span><span class="p">.</span><span class="n">pubkeys</span><span class="p">])</span>

    <span class="k">def</span> <span class="nf">enroll</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span>
        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">pubkeys</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">3</span><span class="p">:</span>
            <span class="k">raise</span> <span class="nb">Exception</span><span class="p">(</span><span class="s">"Vault public keys are full"</span><span class="p">)</span>

        <span class="n">pk</span> <span class="o">=</span> <span class="n">PublicKey</span><span class="p">(</span><span class="nb">bytes</span><span class="p">.</span><span class="n">fromhex</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="s">'pubkey'</span><span class="p">]))</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">pubkeys</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">pk</span><span class="p">)</span>
        <span class="k">return</span> <span class="sa">f</span><span class="s">"Success. There are </span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">pubkeys</span><span class="p">)</span><span class="si">}</span><span class="s"> enrolled"</span>

    <span class="k">def</span> <span class="nf">get_flag</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span>
        <span class="c1"># Deduplicate pubkeys
</span>        <span class="n">auths</span> <span class="o">=</span> <span class="p">{</span><span class="nb">bytes</span><span class="p">.</span><span class="n">fromhex</span><span class="p">(</span><span class="n">pk</span><span class="p">):</span> <span class="nb">bytes</span><span class="p">.</span><span class="n">fromhex</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="k">for</span> <span class="p">(</span><span class="n">pk</span><span class="p">,</span> <span class="n">s</span><span class="p">)</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="s">'pubkeys'</span><span class="p">],</span> <span class="n">data</span><span class="p">[</span><span class="s">'signatures'</span><span class="p">])}</span>

        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">auths</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="p">:</span>
            <span class="k">raise</span> <span class="nb">Exception</span><span class="p">(</span><span class="s">"Too few signatures"</span><span class="p">)</span>

        <span class="k">if</span> <span class="ow">not</span> <span class="nb">all</span><span class="p">(</span><span class="n">PublicKey</span><span class="p">(</span><span class="n">pk</span><span class="p">)</span> <span class="ow">in</span> <span class="bp">self</span><span class="p">.</span><span class="n">pubkeys</span> <span class="k">for</span> <span class="n">pk</span> <span class="ow">in</span> <span class="n">auths</span><span class="p">):</span>
            <span class="k">raise</span> <span class="nb">Exception</span><span class="p">(</span><span class="s">"Public key is not authorized"</span><span class="p">)</span>

        <span class="k">if</span> <span class="ow">not</span> <span class="nb">all</span><span class="p">(</span><span class="n">PublicKey</span><span class="p">(</span><span class="n">pk</span><span class="p">).</span><span class="n">verify</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="sa">b</span><span class="s">'get_flag'</span><span class="p">)</span> <span class="k">for</span> <span class="n">pk</span><span class="p">,</span> <span class="n">s</span> <span class="ow">in</span> <span class="n">auths</span><span class="p">.</span><span class="n">items</span><span class="p">()):</span>
            <span class="k">raise</span> <span class="nb">Exception</span><span class="p">(</span><span class="s">"Signature is invalid"</span><span class="p">)</span>

        <span class="k">return</span> <span class="bp">self</span><span class="p">.</span><span class="n">flag</span>
</code></pre></div></div> <p>The difficulty here is that the vault is already initialized with three existing public keys:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">PUBKEYS</span> <span class="o">=</span> <span class="p">[</span><span class="s">'025056d8e3ae5269577328cb2210bdaa1cf3f076222fcf7222b5578af846685103'</span><span class="p">,</span> 
            <span class="s">'0266aa51a20e5619620d344f3c65b0150a66670b67c10dac5d619f7c713c13d98f'</span><span class="p">,</span> 
            <span class="s">'0267ccabf3ae6ce4ac1107709f3e8daffb3be71f3e34b8879f08cb63dff32c4fdc'</span><span class="p">]</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">"__main__"</span><span class="p">:</span>
    <span class="n">vault</span> <span class="o">=</span> <span class="n">FlagVault</span><span class="p">(</span><span class="n">FLAG</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">pubkey</span> <span class="ow">in</span> <span class="n">PUBKEYS</span><span class="p">:</span>
        <span class="n">vault</span><span class="p">.</span><span class="n">enroll</span><span class="p">({</span><span class="s">'pubkey'</span><span class="p">:</span> <span class="n">pubkey</span><span class="p">})</span>

    <span class="n">write</span><span class="p">({</span><span class="s">'message'</span><span class="p">:</span> <span class="n">WELCOME</span><span class="p">})</span>
</code></pre></div></div> <p>We don’t know any of the private keys corresponding to these public keys, so it is computationally intractable for us to generate correct signatures. Furthermore, the deduplication and authorization checks in <code class="language-plaintext highlighter-rouge">get_flag</code> seemingly prevent us from simply supplying the same (public key, signature) tuple 3 times or supplying public keys that aren’t already in the vault. Thus, it would seem like we are at an impasse.</p> <p>However, there’s actually a crucial vulnerability in the authorization check and <code class="language-plaintext highlighter-rouge">enroll</code>.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Authorization
</span><span class="k">if</span> <span class="ow">not</span> <span class="nb">all</span><span class="p">(</span><span class="n">PublicKey</span><span class="p">(</span><span class="n">pk</span><span class="p">)</span> <span class="ow">in</span> <span class="bp">self</span><span class="p">.</span><span class="n">pubkeys</span> <span class="k">for</span> <span class="n">pk</span> <span class="ow">in</span> <span class="n">auths</span><span class="p">):</span>
    <span class="k">raise</span> <span class="nb">Exception</span><span class="p">(</span><span class="s">"Public key is not authorized"</span><span class="p">)</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">enroll</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span>
    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">pubkeys</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">3</span><span class="p">:</span>
        <span class="k">raise</span> <span class="nb">Exception</span><span class="p">(</span><span class="s">"Vault public keys are full"</span><span class="p">)</span>

    <span class="n">pk</span> <span class="o">=</span> <span class="n">PublicKey</span><span class="p">(</span><span class="nb">bytes</span><span class="p">.</span><span class="n">fromhex</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="s">'pubkey'</span><span class="p">]))</span>
    <span class="bp">self</span><span class="p">.</span><span class="n">pubkeys</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">pk</span><span class="p">)</span>
    <span class="k">return</span> <span class="sa">f</span><span class="s">"Success. There are </span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">pubkeys</span><span class="p">)</span><span class="si">}</span><span class="s"> enrolled"</span>
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">enroll</code> and <code class="language-plaintext highlighter-rouge">get_flag</code>’s authorization check are respectively adding and checking coincurve <code class="language-plaintext highlighter-rouge">PublicKey</code> objects. coincurve is actually a wrapper around libsecp256k1, which supports three distinct byte representations for the same public key:</p> <ul> <li>Compressed: <code class="language-plaintext highlighter-rouge">0x02 || PubKey.X</code> or <code class="language-plaintext highlighter-rouge">0x03 || PubKey.X</code></li> <li>Uncompressed: <code class="language-plaintext highlighter-rouge">0x04 || PubKey.X || PubKey.Y</code></li> <li>Hybrid: <code class="language-plaintext highlighter-rouge">0x06 || PubKey.X || PubKey.Y</code> or <code class="language-plaintext highlighter-rouge">0x07 || PubKey.X || PubKey.Y</code></li> </ul> <p>where the <code class="language-plaintext highlighter-rouge">||</code> above denotes concatenation.</p> <p>Note that in the authorization check, <code class="language-plaintext highlighter-rouge">self.pubkeys</code> is a list, and using the <code class="language-plaintext highlighter-rouge">in</code> operator requires that <code class="language-plaintext highlighter-rouge">__eq__</code> is implemented for the operand. To check for equality of two <code class="language-plaintext highlighter-rouge">PublicKey</code> objects, coincurve compares their uncompressed byte representations:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">__eq__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">other</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
    <span class="k">return</span> <span class="bp">self</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">compressed</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span> <span class="o">==</span> <span class="n">other</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">compressed</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">format</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">compressed</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">True</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bytes</span><span class="p">:</span>
    <span class="s">"""
    Format the public key.

    :param compressed: Whether or to use the compressed format.
    :return: The 33 byte formatted public key, or the 65 byte formatted public key if `compressed` is `False`.
    """</span>
    <span class="n">length</span> <span class="o">=</span> <span class="mi">33</span> <span class="k">if</span> <span class="n">compressed</span> <span class="k">else</span> <span class="mi">65</span>
    <span class="n">serialized</span> <span class="o">=</span> <span class="n">ffi</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="s">'unsigned char [%d]'</span> <span class="o">%</span> <span class="n">length</span><span class="p">)</span>
    <span class="n">output_len</span> <span class="o">=</span> <span class="n">ffi</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="s">'size_t *'</span><span class="p">,</span> <span class="n">length</span><span class="p">)</span>

    <span class="n">lib</span><span class="p">.</span><span class="n">secp256k1_ec_pubkey_serialize</span><span class="p">(</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">context</span><span class="p">.</span><span class="n">ctx</span><span class="p">,</span> <span class="n">serialized</span><span class="p">,</span> <span class="n">output_len</span><span class="p">,</span> <span class="bp">self</span><span class="p">.</span><span class="n">public_key</span><span class="p">,</span> <span class="n">EC_COMPRESSED</span> <span class="k">if</span> <span class="n">compressed</span> <span class="k">else</span> <span class="n">EC_UNCOMPRESSED</span>
    <span class="p">)</span>

    <span class="k">return</span> <span class="nb">bytes</span><span class="p">(</span><span class="n">ffi</span><span class="p">.</span><span class="nb">buffer</span><span class="p">(</span><span class="n">serialized</span><span class="p">,</span> <span class="n">length</span><span class="p">))</span>
</code></pre></div></div> <p>Indeed, <code class="language-plaintext highlighter-rouge">PublicKey</code> objects initialized on equivalent compressed, uncompressed, and hybrid public keys will all be equal.</p> <p>Thus, we can bypass the deduplication check by generating a public / private keypair, signing <code class="language-plaintext highlighter-rouge">'get_flag'</code> with the private key, and specifying the compressed, uncompressed, and hybrid representations of our public key along with the signature when calling <code class="language-plaintext highlighter-rouge">get_flag</code>. This can be done as follows:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">coincurve</span> <span class="kn">import</span> <span class="n">PublicKey</span>
<span class="kn">from</span> <span class="nn">pwn</span> <span class="kn">import</span> <span class="o">*</span>
<span class="kn">import</span> <span class="nn">json</span>

<span class="n">PUBKEYS</span> <span class="o">=</span> <span class="p">[</span><span class="s">'025056d8e3ae5269577328cb2210bdaa1cf3f076222fcf7222b5578af846685103'</span><span class="p">,</span> 
            <span class="s">'0266aa51a20e5619620d344f3c65b0150a66670b67c10dac5d619f7c713c13d98f'</span><span class="p">,</span> 
            <span class="s">'0267ccabf3ae6ce4ac1107709f3e8daffb3be71f3e34b8879f08cb63dff32c4fdc'</span><span class="p">,</span>
            <span class="s">'03a0434d9e47f3c86235477c7b1ae6ae5d3442d49b1943c2b752a68e2a47e247c7'</span><span class="p">]</span>

<span class="n">PUBKEYS</span> <span class="o">=</span> <span class="p">[</span><span class="n">PublicKey</span><span class="p">(</span><span class="nb">bytes</span><span class="p">.</span><span class="n">fromhex</span><span class="p">(</span><span class="n">x</span><span class="p">))</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">PUBKEYS</span><span class="p">]</span>

<span class="c1"># Verifies our solution
</span><span class="k">def</span> <span class="nf">verify_sol</span><span class="p">(</span><span class="n">data</span><span class="p">):</span>
    <span class="c1"># Deduplicate pubkeys
</span>    <span class="n">auths</span> <span class="o">=</span> <span class="p">{</span><span class="nb">bytes</span><span class="p">.</span><span class="n">fromhex</span><span class="p">(</span><span class="n">pk</span><span class="p">):</span> <span class="nb">bytes</span><span class="p">.</span><span class="n">fromhex</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="k">for</span> <span class="p">(</span><span class="n">pk</span><span class="p">,</span> <span class="n">s</span><span class="p">)</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="s">'pubkeys'</span><span class="p">],</span> <span class="n">data</span><span class="p">[</span><span class="s">'signatures'</span><span class="p">])}</span>

    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">auths</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="p">:</span>
        <span class="k">raise</span> <span class="nb">Exception</span><span class="p">(</span><span class="s">"Too few signatures"</span><span class="p">)</span>

    <span class="k">if</span> <span class="ow">not</span> <span class="nb">all</span><span class="p">(</span><span class="n">PublicKey</span><span class="p">(</span><span class="n">pk</span><span class="p">)</span> <span class="ow">in</span> <span class="n">PUBKEYS</span> <span class="k">for</span> <span class="n">pk</span> <span class="ow">in</span> <span class="n">auths</span><span class="p">):</span>
        <span class="k">raise</span> <span class="nb">Exception</span><span class="p">(</span><span class="s">"Public key is not authorized"</span><span class="p">)</span>

    <span class="k">if</span> <span class="ow">not</span> <span class="nb">all</span><span class="p">(</span><span class="n">PublicKey</span><span class="p">(</span><span class="n">pk</span><span class="p">).</span><span class="n">verify</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="sa">b</span><span class="s">'get_flag'</span><span class="p">)</span> <span class="k">for</span> <span class="n">pk</span><span class="p">,</span> <span class="n">s</span> <span class="ow">in</span> <span class="n">auths</span><span class="p">.</span><span class="n">items</span><span class="p">()):</span>
        <span class="k">raise</span> <span class="nb">Exception</span><span class="p">(</span><span class="s">"Signature is invalid"</span><span class="p">)</span>
    
    <span class="k">return</span> <span class="bp">True</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">"__main__"</span><span class="p">:</span>
    <span class="n">data</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="n">pubkeys</span> <span class="o">=</span> <span class="p">(</span><span class="s">"03a0434d9e47f3c86235477c7b1ae6ae5d3442d49b1943c2b752a68e2a47e247c7"</span><span class="p">,</span><span class="s">"04a0434d9e47f3c86235477c7b1ae6ae5d3442d49b1943c2b752a68e2a47e247c7893aba425419bc27a3b6c7e693a24c696f794c2ed877a1593cbee53b037368d7"</span><span class="p">,</span>
    <span class="s">"07a0434d9e47f3c86235477c7b1ae6ae5d3442d49b1943c2b752a68e2a47e247c7893aba425419bc27a3b6c7e693a24c696f794c2ed877a1593cbee53b037368d7"</span><span class="p">)</span>
    
    <span class="n">init_msg</span> <span class="o">=</span> <span class="p">{</span><span class="s">"method"</span><span class="p">:</span> <span class="s">"enroll"</span><span class="p">,</span> <span class="s">"pubkey"</span><span class="p">:</span> <span class="n">pubkeys</span><span class="p">[</span><span class="mi">0</span><span class="p">]}</span>

    <span class="n">signatures</span> <span class="o">=</span> <span class="nb">tuple</span><span class="p">([</span><span class="s">"304402204b254a205d0afd7620dd37bacbeadd4a4098cfa7b4f36597470538fb5d8c1836022058ee0cf5587015007b3fd5f55528c0db7c49faac4024c1c8518ed346938cad02"</span><span class="p">]</span> <span class="o">*</span> <span class="mi">3</span><span class="p">)</span>

    <span class="n">data</span><span class="p">[</span><span class="s">"method"</span><span class="p">]</span> <span class="o">=</span> <span class="s">"get_flag"</span>
    <span class="n">data</span><span class="p">[</span><span class="s">"pubkeys"</span><span class="p">]</span> <span class="o">=</span> <span class="n">pubkeys</span>
    <span class="n">data</span><span class="p">[</span><span class="s">"signatures"</span><span class="p">]</span> <span class="o">=</span> <span class="n">signatures</span>

    <span class="k">assert</span> <span class="n">verify_sol</span><span class="p">(</span><span class="n">data</span><span class="p">),</span> <span class="s">"L"</span>

    <span class="c1"># Socket logic
</span>    <span class="n">r</span> <span class="o">=</span> <span class="n">remote</span><span class="p">(</span><span class="s">"vaulted.nc.jctf.pro"</span><span class="p">,</span> <span class="mi">1337</span><span class="p">)</span>
    <span class="n">r</span><span class="p">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1024</span><span class="p">)</span>
    <span class="n">r</span><span class="p">.</span><span class="n">sendline</span><span class="p">(</span><span class="nb">bytes</span><span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">init_msg</span><span class="p">),</span> <span class="s">"utf8"</span><span class="p">))</span>
    <span class="n">r</span><span class="p">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1024</span><span class="p">)</span>
    <span class="n">r</span><span class="p">.</span><span class="n">sendline</span><span class="p">(</span><span class="nb">bytes</span><span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">data</span><span class="p">),</span> <span class="s">"utf8"</span><span class="p">))</span>
    <span class="k">print</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1024</span><span class="p">))</span>
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[+] Opening connection to vaulted.nc.jctf.pro on port 1337: Done
b'{"message": "justCTF{n0nc4n0n1c4l_72037872768289199286663281818929329}"}\n'
[*] Closed connection to vaulted.nc.jctf.pro port 1337
</code></pre></div></div> <h2 id="flag">Flag</h2> <p>justCTF{n0nc4n0n1c4l_72037872768289199286663281818929329}</p>]]></content><author><name></name></author><category term="CTFs"/><category term="cryptography"/><category term="justCTF2023"/><summary type="html"><![CDATA[Cryptography in practice]]></summary></entry><entry><title type="html">Rustberry (201) - JustCTF 2023</title><link href="https://pwang00.github.io//blog/2023/justctf-rustberry/" rel="alternate" type="text/html" title="Rustberry (201) - JustCTF 2023"/><published>2023-06-05T11:10:00-04:00</published><updated>2023-06-05T11:10:00-04:00</updated><id>https://pwang00.github.io//blog/2023/justctf-rustberry</id><content type="html" xml:base="https://pwang00.github.io//blog/2023/justctf-rustberry/"><![CDATA[<p>Rustberry was a reverse engineering challenge that was worth 201 points at the end of <a href="https://ctftime.org/event/1930/">JustCTF 2023</a>. You can download the original challenge <a href="https://pwang00.github.io/assets/challenges/justctf2023/rev/rustberry.exe">here.</a></p> <h2 id="problem-description">Problem Description</h2> <p>I have enough of VMs. This is a simple crackme</p> <p>Note: flag is in format jctf{[A-Za-z0-9_]+}</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nc vaulted.nc.jctf.pro 1337
</code></pre></div></div> <h2 id="solution">Solution</h2> <p>We’re given a binary <code class="language-plaintext highlighter-rouge">rustberry.exe</code>, which seems to be have been initially written in Rust and compiled for ARMv7+:</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>file rustberry.exe 
rustberry.exe: ELF 32-bit LSB pie executable, ARM, EABI5 version 1 <span class="o">(</span>SYSV<span class="o">)</span>, dynamically linked, interpreter /lib/ld-linux-armhf.so.3, <span class="k">for </span>GNU/Linux 3.2.0, BuildID[sha1]<span class="o">=</span>fe44afa081afc7b0025b39da63c436ebdc7038be, with debug_info, not stripped
</code></pre></div></div> <p>Typically, the main function of Rust ELFs follows the naming convention <code class="language-plaintext highlighter-rouge">&lt;project_name&gt;::main</code>, and indeed we find <code class="language-plaintext highlighter-rouge">rustberry::main</code> in Ghidra’s decompilation of the binary.</p> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">main</span><span class="p">(</span><span class="n">undefined4</span> <span class="n">param_1</span><span class="p">,</span><span class="n">undefined4</span> <span class="n">param_2</span><span class="p">)</span>

<span class="p">{</span>
  <span class="n">code</span> <span class="o">*</span><span class="n">local_c</span><span class="p">;</span>
  
  <span class="n">local_c</span> <span class="o">=</span> <span class="n">rustberry</span><span class="o">::</span><span class="n">main</span><span class="p">;</span>
  <span class="n">std</span><span class="o">::</span><span class="n">rt</span><span class="o">::</span><span class="n">lang_start_internal</span>
            <span class="p">(</span><span class="o">&amp;</span><span class="n">local_c</span><span class="p">,</span><span class="o">&amp;</span><span class="n">anon</span><span class="p">.</span><span class="mi">1360747006</span><span class="n">cbb19a0f51f675ad6cc70e</span><span class="p">.</span><span class="mi">0</span><span class="p">.</span><span class="n">llvm</span><span class="p">.</span><span class="mi">6404864161857707856</span><span class="p">,</span><span class="n">param_1</span><span class="p">,</span>
             <span class="n">param_2</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
  <span class="k">return</span><span class="p">;</span>
<span class="p">}</span>

<span class="p">...</span>

<span class="kt">void</span> <span class="n">rustberry</span><span class="o">::</span><span class="n">main</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">param_1</span><span class="p">)</span>

<span class="p">{</span>
  <span class="n">undefined</span> <span class="o">*</span><span class="n">puVar1</span><span class="p">;</span>
  <span class="n">undefined4</span> <span class="o">*</span><span class="n">puVar2</span><span class="p">;</span>
  <span class="p">...</span>
<span class="p">}</span>
</code></pre></div></div> <p>Examining it, a few things stand out:</p> <p><code class="language-plaintext highlighter-rouge">__s2</code> is likely a <code class="language-plaintext highlighter-rouge">Vec&lt;u8&gt;</code> that’s storing some kind of key:</p> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">__s2</span> <span class="o">=</span> <span class="p">(</span><span class="n">undefined4</span> <span class="o">*</span><span class="p">)</span><span class="n">std</span><span class="o">::</span><span class="n">alloc</span><span class="o">::</span><span class="n">__default_lib_allocator</span><span class="o">::</span><span class="n">__rust_alloc</span><span class="p">(</span><span class="mh">0xac</span><span class="p">,</span><span class="mi">4</span><span class="p">);</span>
<span class="k">if</span> <span class="p">(</span><span class="n">__s2</span> <span class="o">==</span> <span class="p">(</span><span class="n">undefined4</span> <span class="o">*</span><span class="p">)</span><span class="mh">0x0</span><span class="p">)</span> <span class="p">{</span>
<span class="cm">/* WARNING: Subroutine does not return */</span>
<span class="n">alloc</span><span class="o">::</span><span class="n">alloc</span><span class="o">::</span><span class="n">handle_alloc_error</span><span class="p">(</span><span class="mh">0xac</span><span class="p">,</span><span class="mi">4</span><span class="p">);</span>
<span class="p">}</span>
<span class="n">__s2</span><span class="p">[</span><span class="mh">0x25</span><span class="p">]</span> <span class="o">=</span> <span class="mi">7</span><span class="p">;</span>
<span class="n">__s2</span><span class="p">[</span><span class="mh">0x29</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x1c</span><span class="p">;</span>
<span class="n">__s2</span><span class="p">[</span><span class="mh">0x2a</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0xff</span><span class="p">;</span>
<span class="n">__s2</span><span class="p">[</span><span class="mh">0x18</span><span class="p">]</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
<span class="n">__s2</span><span class="p">[</span><span class="mh">0x26</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x21</span><span class="p">;</span>
<span class="n">__s2</span><span class="p">[</span><span class="mh">0x19</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x1a</span><span class="p">;</span>
<span class="n">__s2</span><span class="p">[</span><span class="mh">0x1a</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x11</span><span class="p">;</span>
<span class="n">__s2</span><span class="p">[</span><span class="mh">0x1b</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x14</span><span class="p">;</span>
<span class="n">__s2</span><span class="p">[</span><span class="mh">0x20</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x11</span><span class="p">;</span>
<span class="n">__s2</span><span class="p">[</span><span class="mh">0x21</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x11</span><span class="p">;</span>
<span class="n">__s2</span><span class="p">[</span><span class="mh">0x1d</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x13</span><span class="p">;</span>
<span class="n">__s2</span><span class="p">[</span><span class="mh">0x1e</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
<span class="n">__s2</span><span class="p">[</span><span class="mh">0x1f</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x20</span><span class="p">;</span>
<span class="n">__s2</span><span class="p">[</span><span class="mh">0x13</span><span class="p">]</span> <span class="o">=</span> <span class="mi">8</span><span class="p">;</span>
<span class="n">__s2</span><span class="p">[</span><span class="mh">0x28</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0xb</span><span class="p">;</span>
<span class="n">__s2</span><span class="p">[</span><span class="mh">0x27</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0xb</span><span class="p">;</span>
<span class="n">__s2</span><span class="p">[</span><span class="mh">0x11</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0xb</span><span class="p">;</span>
<span class="n">__s2</span><span class="p">[</span><span class="mh">0x17</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0xb</span><span class="p">;</span>
<span class="n">__s2</span><span class="p">[</span><span class="mi">8</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x15</span><span class="p">;</span>
<span class="n">__s2</span><span class="p">[</span><span class="mi">9</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x33</span><span class="p">;</span>
<span class="n">__s2</span><span class="p">[</span><span class="mh">0x22</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x18</span><span class="p">;</span>
<span class="n">__s2</span><span class="p">[</span><span class="mh">0x10</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0xf</span><span class="p">;</span>
<span class="n">__s2</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x1a</span><span class="p">;</span>
<span class="n">__s2</span><span class="p">[</span><span class="mh">0xb</span><span class="p">]</span> <span class="o">=</span> <span class="mi">9</span><span class="p">;</span>
<span class="n">__s2</span><span class="p">[</span><span class="mh">0xc</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x14</span><span class="p">;</span>
<span class="n">__s2</span><span class="p">[</span><span class="mh">0xd</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x12</span><span class="p">;</span>
<span class="n">__s2</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
<span class="n">__s2</span><span class="p">[</span><span class="mh">0x1c</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x22</span><span class="p">;</span>
<span class="n">__s2</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x1b</span><span class="p">;</span>
<span class="n">__s2</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0xd</span><span class="p">;</span>
<span class="n">__s2</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x1d</span><span class="p">;</span>
<span class="n">__s2</span><span class="p">[</span><span class="mh">0x23</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x1a</span><span class="p">;</span>
<span class="n">__s2</span><span class="p">[</span><span class="mh">0x15</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x1a</span><span class="p">;</span>
<span class="n">__s2</span><span class="p">[</span><span class="mh">0xf</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x1a</span><span class="p">;</span>
<span class="n">__s2</span><span class="p">[</span><span class="mi">7</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x1a</span><span class="p">;</span>
<span class="n">__s2</span><span class="p">[</span><span class="mh">0x24</span><span class="p">]</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
<span class="n">__s2</span><span class="p">[</span><span class="mh">0x12</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="n">__s2</span><span class="p">[</span><span class="mh">0x14</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0xd</span><span class="p">;</span>
<span class="n">__s2</span><span class="p">[</span><span class="mh">0x16</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x1d</span><span class="p">;</span>
<span class="n">__s2</span><span class="p">[</span><span class="mh">0xe</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x13</span><span class="p">;</span>
<span class="o">*</span><span class="n">__s2</span> <span class="o">=</span> <span class="mi">9</span><span class="p">;</span>
<span class="n">__s2</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
<span class="n">__s2</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x13</span><span class="p">;</span>
<span class="n">__dest</span> <span class="o">=</span> <span class="p">(</span><span class="n">byte</span> <span class="o">*</span><span class="p">)</span><span class="n">std</span><span class="o">::</span><span class="n">alloc</span><span class="o">::</span><span class="n">__default_lib_allocator</span><span class="o">::</span><span class="n">__rust_alloc</span><span class="p">(</span><span class="mh">0x41</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">__dest</code> is likely some <code class="language-plaintext highlighter-rouge">Vec&lt;u8&gt;</code> that’s storing the upper and lowercase alphabet and some special characters:</p> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">__dest</span> <span class="o">=</span> <span class="p">(</span><span class="n">byte</span> <span class="o">*</span><span class="p">)</span><span class="n">std</span><span class="o">::</span><span class="n">alloc</span><span class="o">::</span><span class="n">__default_lib_allocator</span><span class="o">::</span><span class="n">__rust_alloc</span><span class="p">(</span><span class="mh">0x41</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
<span class="k">if</span> <span class="p">(</span><span class="n">__dest</span> <span class="o">==</span> <span class="p">(</span><span class="n">byte</span> <span class="o">*</span><span class="p">)</span><span class="mh">0x0</span><span class="p">)</span> <span class="p">{</span>
                <span class="cm">/* WARNING: Subroutine does not return */</span>
<span class="n">alloc</span><span class="o">::</span><span class="n">alloc</span><span class="o">::</span><span class="n">handle_alloc_error</span><span class="p">(</span><span class="mh">0x41</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
<span class="p">}</span>
<span class="n">memcpy</span><span class="p">(</span><span class="n">__dest</span><span class="p">,</span>
        <span class="s">"abcdefghijklmnopqrstuvwxyz_{}0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZGive me the flag? </span><span class="se">\n</span><span class="s">You</span><span class="se">\'</span><span class="s"> ve entered </span><span class="se">\n</span><span class="s">Error: </span><span class="se">\n</span><span class="s">Index out of bounds()/rustc/84c898d65adf2f39a5a98507f1fe0ce10a2b8dbc/ library/core/src/str/pattern.rs"</span>
        <span class="p">,</span><span class="mh">0x41</span><span class="p">);</span>
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">puVar2</code> is likely the String corresponding to our user input. Furthermore, there’s a main loop that’s computing <code class="language-plaintext highlighter-rouge">uVar6 = puVar2[i]</code>, checking if <code class="language-plaintext highlighter-rouge">puVar2[i] in dest[1]</code>, and copying <code class="language-plaintext highlighter-rouge">dest.index_of(puVar2[i])</code> into <code class="language-plaintext highlighter-rouge">__s1[i]</code>:</p> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">do</span> <span class="p">{</span>
      <span class="n">uVar6</span> <span class="o">=</span> <span class="p">(</span><span class="n">uint</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">byte</span> <span class="o">*</span><span class="p">)((</span><span class="kt">int</span><span class="p">)</span><span class="n">puVar2</span> <span class="o">+</span> <span class="n">uVar9</span><span class="p">);</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">uVar6</span> <span class="o">==</span> <span class="o">*</span><span class="n">__dest</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">uVar6</span> <span class="o">=</span> <span class="n">count_leading_zeroes</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
        <span class="n">iVar7</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="nl">LAB_0001624c:</span>
        <span class="n">iVar7</span> <span class="o">=</span> <span class="n">iVar7</span> <span class="o">+</span> <span class="p">(</span><span class="n">uVar6</span> <span class="o">&gt;&gt;</span> <span class="mi">5</span> <span class="o">^</span> <span class="mi">1</span><span class="p">);</span>
      <span class="p">}</span>
      <span class="k">else</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">uVar6</span> <span class="o">==</span> <span class="n">__dest</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span> <span class="p">{</span>
          <span class="n">uVar6</span> <span class="o">=</span> <span class="n">count_leading_zeroes</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
          <span class="n">iVar7</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
          <span class="k">goto</span> <span class="n">LAB_0001624c</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="p">...</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">uVar6</span> <span class="o">==</span> <span class="n">__dest</span><span class="p">[</span><span class="mh">0x40</span><span class="p">])</span> <span class="p">{</span>
          <span class="n">iVar7</span> <span class="o">=</span> <span class="mh">0x40</span><span class="p">;</span>
          <span class="n">uVar6</span> <span class="o">=</span> <span class="n">count_leading_zeroes</span><span class="p">(</span><span class="n">uVar6</span> <span class="o">-</span> <span class="n">__dest</span><span class="p">[</span><span class="mh">0x40</span><span class="p">]);</span>
          <span class="k">goto</span> <span class="n">LAB_0001624c</span><span class="p">;</span>
        <span class="p">}</span>
      <span class="p">}</span>
      <span class="o">*</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="p">)(</span><span class="n">__s1</span> <span class="o">+</span> <span class="n">uVar9</span> <span class="o">*</span> <span class="mi">4</span><span class="p">)</span> <span class="o">=</span> <span class="n">iVar7</span><span class="p">;</span>
      <span class="n">uVar9</span> <span class="o">=</span> <span class="n">uVar9</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="n">uVar4</span> <span class="o">!=</span> <span class="n">uVar9</span><span class="p">);</span>
</code></pre></div></div> <p>There’s a comparison that compares <code class="language-plaintext highlighter-rouge">uVar4</code> to 0x2b = 42, suggesting that <code class="language-plaintext highlighter-rouge">uVar4</code> is the length of the input. Furthermore, the comparison checks that the <code class="language-plaintext highlighter-rouge">__s1</code> and <code class="language-plaintext highlighter-rouge">__s2</code> are bytewise identical for the first 0xac = 172 characters. If the check succeeds, then the program will output “You’ve entered correctly”, and otherwise it will output “You’ve entered incorrectly”.</p> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="p">((</span><span class="n">uVar4</span> <span class="o">!=</span> <span class="mh">0x2b</span><span class="p">)</span> <span class="o">||</span> <span class="p">(</span><span class="n">iVar7</span> <span class="o">=</span> <span class="n">bcmp</span><span class="p">(</span><span class="n">__s1</span><span class="p">,</span><span class="n">__s2</span><span class="p">,</span><span class="mh">0xac</span><span class="p">),</span> <span class="n">iVar7</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">))</span> <span class="k">goto</span> <span class="n">LAB_000162f4</span><span class="p">;</span>
<span class="n">local_48</span> <span class="o">=</span> <span class="mi">9</span><span class="p">;</span>
<span class="n">local_4c</span> <span class="o">=</span> <span class="p">(</span><span class="n">undefined4</span> <span class="o">*</span><span class="p">)</span><span class="n">std</span><span class="o">::</span><span class="n">alloc</span><span class="o">::</span><span class="n">__default_lib_allocator</span><span class="o">::</span><span class="n">__rust_alloc</span><span class="p">(</span><span class="mi">9</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
<span class="k">if</span> <span class="p">(</span><span class="n">local_4c</span> <span class="o">==</span> <span class="p">(</span><span class="n">undefined4</span> <span class="o">*</span><span class="p">)</span><span class="mh">0x0</span><span class="p">)</span> <span class="p">{</span>
                <span class="cm">/* WARNING: Subroutine does not return */</span>
    <span class="n">alloc</span><span class="o">::</span><span class="n">alloc</span><span class="o">::</span><span class="n">handle_alloc_error</span><span class="p">(</span><span class="mi">9</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
<span class="p">}</span>

<span class="c1">// "correctly"</span>
<span class="o">*</span><span class="p">(</span><span class="n">undefined</span> <span class="o">*</span><span class="p">)(</span><span class="n">local_4c</span> <span class="o">+</span> <span class="mi">2</span><span class="p">)</span> <span class="o">=</span> <span class="mh">0x79</span><span class="p">;</span>
<span class="n">local_4c</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x6c746365</span><span class="p">;</span>
<span class="n">uVar8</span> <span class="o">=</span> <span class="mh">0x72726f63</span><span class="p">;</span>

<span class="p">...</span>

<span class="n">LAB_000162f4</span><span class="o">:</span>
    <span class="n">local_48</span> <span class="o">=</span> <span class="mh">0xb</span><span class="p">;</span>
    <span class="n">local_4c</span> <span class="o">=</span> <span class="p">(</span><span class="n">undefined4</span> <span class="o">*</span><span class="p">)</span><span class="n">std</span><span class="o">::</span><span class="n">alloc</span><span class="o">::</span><span class="n">__default_lib_allocator</span><span class="o">::</span><span class="n">__rust_alloc</span><span class="p">(</span><span class="mh">0xb</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">local_4c</span> <span class="o">==</span> <span class="p">(</span><span class="n">undefined4</span> <span class="o">*</span><span class="p">)</span><span class="mh">0x0</span><span class="p">)</span> <span class="p">{</span>
                    <span class="cm">/* WARNING: Subroutine does not return */</span>
      <span class="n">alloc</span><span class="o">::</span><span class="n">alloc</span><span class="o">::</span><span class="n">handle_alloc_error</span><span class="p">(</span><span class="mh">0xb</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="c1">// "incorrectly"</span>
    <span class="o">*</span><span class="p">(</span><span class="n">undefined4</span> <span class="o">*</span><span class="p">)((</span><span class="kt">int</span><span class="p">)</span><span class="n">local_4c</span> <span class="o">+</span> <span class="mi">7</span><span class="p">)</span> <span class="o">=</span> <span class="mh">0x796c7463</span><span class="p">;</span>
    <span class="n">local_4c</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x63657272</span><span class="p">;</span>
    <span class="n">uVar8</span> <span class="o">=</span> <span class="mh">0x6f636e69</span><span class="p">;</span>
</code></pre></div></div> <p>We therefore need to find a way to supply a string such that after the indices are checked against <code class="language-plaintext highlighter-rouge">__dest</code> and copied into <code class="language-plaintext highlighter-rouge">__s1</code>, <code class="language-plaintext highlighter-rouge">__s1</code> and <code class="language-plaintext highlighter-rouge">__s2</code> match. This is actually quite simple since we’re already given the correct indices in <code class="language-plaintext highlighter-rouge">__s2</code>. We can recover the original string by doing <code class="language-plaintext highlighter-rouge">__dest[__s2[i]]</code>.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">__dest</span> <span class="o">=</span> <span class="s">"abcdefghijklmnopqrstuvwxyz_{}0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZGive me the flag? </span><span class="se">\n</span><span class="s">You' ve entered </span><span class="se">\n</span><span class="s">Error: </span><span class="se">\n</span><span class="s">Index out of bounds()/rustc/84c898d65adf2f39a5a98507f1fe0ce10a2b8dbc/ library/core/src/str/pattern.rs"</span>
<span class="n">__s2</span> <span class="o">=</span> <span class="p">[</span><span class="mi">9</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">27</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">29</span><span class="p">,</span> <span class="mi">26</span><span class="p">,</span> <span class="mi">21</span><span class="p">,</span> <span class="mi">51</span><span class="p">,</span> <span class="mi">26</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">26</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">26</span><span class="p">,</span> <span class="mi">29</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">26</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">34</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">24</span><span class="p">,</span> <span class="mi">26</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">33</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">28</span><span class="p">]</span>
<span class="n">puVar2</span> <span class="o">=</span> <span class="s">""</span><span class="p">.</span><span class="n">join</span><span class="p">([</span><span class="n">__dest</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">__s2</span><span class="p">])</span>

<span class="k">print</span><span class="p">(</span><span class="n">puVar2</span><span class="p">)</span>
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">jctf{n0_vM_just_plain_0ld_ru5tb3rry_ch4ll}</code>.</p> <p>Indeed, after running the binary with this, we confirm that we have the correct flag.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ export LD_LIBRARY_PATH=/usr/arm-linux-gnueabihf/lib/
$ ./rustberry.exe 
Give me the flag? 
jctf{n0_vM_just_plain_0ld_ru5tb3rry_ch4ll}
You've entered correctly
</code></pre></div></div> <h3 id="some-additional-notes">Some additional notes</h3> <p>We made some assumptions about the purpose of some variables since decompiled code isn’t always sensible. For example, it’s not 100% clear by looking at the excerpt below that <code class="language-plaintext highlighter-rouge">uVar4</code> is the length of the input and <code class="language-plaintext highlighter-rouge">puVar2</code> is the input string.</p> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">local_38</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
<span class="n">local_30</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="n">local_44</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="n">std</span><span class="o">::</span><span class="n">io</span><span class="o">::</span><span class="n">stdio</span><span class="o">::</span><span class="n">_print</span><span class="p">(</span><span class="o">&amp;</span><span class="n">local_44</span><span class="p">);</span>
<span class="n">local_54</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="n">local_58</span> <span class="o">=</span> <span class="p">(</span><span class="n">undefined4</span> <span class="o">*</span><span class="p">)</span><span class="mh">0x1</span><span class="p">;</span>
<span class="n">local_5c</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="n">local_50</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">io</span><span class="o">::</span><span class="n">stdio</span><span class="o">::</span><span class="n">stdin</span><span class="p">();</span>
<span class="n">std</span><span class="o">::</span><span class="n">io</span><span class="o">::</span><span class="n">stdio</span><span class="o">::</span><span class="n">Stdin</span><span class="o">::</span><span class="n">read_line</span><span class="p">(</span><span class="o">&amp;</span><span class="n">local_44</span><span class="p">,</span><span class="o">&amp;</span><span class="n">local_50</span><span class="p">,</span><span class="o">&amp;</span><span class="n">local_5c</span><span class="p">);</span>
<span class="n">uVar4</span> <span class="o">=</span> <span class="n">local_54</span><span class="p">;</span>
<span class="n">puVar2</span> <span class="o">=</span> <span class="n">local_58</span><span class="p">;</span>
</code></pre></div></div> <p>We can ascertain this via dynamic analysis.</p> <p>From looking at the dissassembly, we can see that</p> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="n">uint</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">byte</span> <span class="o">*</span><span class="p">)((</span><span class="kt">int</span><span class="p">)</span><span class="n">puVar2</span> <span class="o">+</span> <span class="n">uVar9</span><span class="p">);</span>
</code></pre></div></div> <p>corresponds to</p> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mo">00015</span><span class="n">c2c</span> <span class="mo">02</span> <span class="mo">00</span> <span class="n">db</span> <span class="n">e7</span>     <span class="n">ldrb</span>       <span class="n">r0</span><span class="p">,[</span><span class="n">r11</span><span class="p">,</span><span class="n">r2</span><span class="p">]</span>
</code></pre></div></div> <p>meaning <code class="language-plaintext highlighter-rouge">puVar2</code> is stored in <code class="language-plaintext highlighter-rouge">r11</code>. Furthermore,</p> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="p">((</span><span class="n">uVar4</span> <span class="o">!=</span> <span class="mh">0x2b</span><span class="p">)</span> <span class="o">||</span> <span class="p">(</span><span class="n">iVar7</span> <span class="o">=</span> <span class="n">bcmp</span><span class="p">(</span><span class="n">__s1</span><span class="p">,</span><span class="n">__s2</span><span class="p">,</span><span class="mh">0xac</span><span class="p">),</span> <span class="n">iVar7</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">))</span> <span class="k">goto</span> <span class="n">LAB_000162f4</span>
</code></pre></div></div> <p>corresponds to</p> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mo">0001626</span><span class="mi">8</span> <span class="mi">2</span><span class="n">b</span> <span class="mo">00</span> <span class="mi">5</span><span class="n">a</span> <span class="n">e3</span>     <span class="n">cmp</span>        <span class="n">r10</span><span class="p">,</span><span class="err">#</span><span class="mh">0x2b</span>
<span class="mo">0001626</span><span class="n">c</span> <span class="mi">20</span> <span class="mo">00</span> <span class="mo">00</span> <span class="mi">1</span><span class="n">a</span>     <span class="n">bne</span>        <span class="n">LAB_000162f4</span>
<span class="mo">00016270</span> <span class="mi">09</span> <span class="mo">00</span> <span class="n">a0</span> <span class="n">e1</span>     <span class="n">cpy</span>        <span class="n">r0</span><span class="p">,</span><span class="n">r9</span>
<span class="mo">00016274</span> <span class="mo">07</span> <span class="mi">10</span> <span class="n">a0</span> <span class="n">e1</span>     <span class="n">cpy</span>        <span class="n">r1</span><span class="p">,</span><span class="n">r7</span>
<span class="mo">0001627</span><span class="mi">8</span> <span class="n">ac</span> <span class="mi">20</span> <span class="n">a0</span> <span class="n">e3</span>     <span class="n">mov</span>        <span class="n">r2</span><span class="p">,</span><span class="err">#</span><span class="mh">0xac</span>
<span class="mo">0001627</span><span class="n">c</span> <span class="mi">08</span> <span class="n">f2</span> <span class="n">ff</span> <span class="n">eb</span>     <span class="n">bl</span>         <span class="o">&lt;</span><span class="n">EXTERNAL</span><span class="o">&gt;::</span><span class="n">bcmp</span>
<span class="mo">000162</span><span class="mi">80</span> <span class="mo">00</span> <span class="mo">00</span> <span class="mi">50</span> <span class="n">e3</span>     <span class="n">cmp</span>        <span class="n">r0</span><span class="p">,</span><span class="err">#</span><span class="mh">0x0</span>
<span class="mo">000162</span><span class="mi">84</span> <span class="mi">1</span><span class="n">a</span> <span class="mo">00</span> <span class="mo">00</span> <span class="mi">1</span><span class="n">a</span>     <span class="n">bne</span>        <span class="n">LAB_000162f4</span>
</code></pre></div></div> <p>so <code class="language-plaintext highlighter-rouge">uVar4</code> is stored in <code class="language-plaintext highlighter-rouge">r10</code>, <code class="language-plaintext highlighter-rouge">__s1</code> is stored in <code class="language-plaintext highlighter-rouge">r9</code>, and <code class="language-plaintext highlighter-rouge">__s2</code> is stored in <code class="language-plaintext highlighter-rouge">r7</code>.</p> <p>We can then run the binary via qemu-arm and gdbserver, set relevant breakpoints, and examine the contents of these registers:</p> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">$</span> <span class="n">qemu</span><span class="o">-</span><span class="n">arm</span> <span class="o">-</span><span class="n">g</span> <span class="mi">1234</span> <span class="n">rustberry</span><span class="p">.</span><span class="n">exe</span> 
<span class="n">Give</span> <span class="n">me</span> <span class="n">the</span> <span class="n">flag</span><span class="o">?</span> 
<span class="n">jctf</span><span class="p">{</span><span class="n">n0_vM_just_plain_0ld_ru5tb3rry_ch4ll</span><span class="p">}</span>

<span class="p">...</span>

<span class="n">gdb</span><span class="o">-</span><span class="n">peda</span><span class="err">$</span> <span class="n">b</span> <span class="o">*</span><span class="mh">0x40006268</span>
<span class="n">Breakpoint</span> <span class="mi">1</span> <span class="n">at</span> <span class="mh">0x40006268</span>
<span class="n">gdb</span><span class="o">-</span><span class="n">peda</span><span class="err">$</span> <span class="n">x</span><span class="o">/</span><span class="n">s</span> <span class="err">$</span><span class="n">r11</span>
<span class="mh">0x40056860</span><span class="o">:</span>     <span class="s">"jctf{n0_vM_just_plain_0ld_ru5tb3rry_ch4ll}</span><span class="se">\n</span><span class="s">i</span><span class="se">\261</span><span class="s">"</span>
<span class="n">gdb</span><span class="o">-</span><span class="n">peda</span><span class="err">$</span> <span class="n">p</span> <span class="err">$</span><span class="n">r10</span>
<span class="err">$</span><span class="mi">13</span> <span class="o">=</span> <span class="mh">0x2b</span>
<span class="n">gdb</span><span class="o">-</span><span class="n">peda</span><span class="err">$</span> <span class="n">x</span><span class="o">/</span><span class="mi">172</span><span class="n">x</span> <span class="err">$</span><span class="n">r7</span>
<span class="mh">0x40056890</span><span class="o">:</span>     <span class="mh">0x09</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x02</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>
<span class="mh">0x40056898</span><span class="o">:</span>     <span class="mh">0x13</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x05</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>
<span class="mh">0x400568a0</span><span class="o">:</span>     <span class="mh">0x1b</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x0d</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>
<span class="mh">0x400568a8</span><span class="o">:</span>     <span class="mh">0x1d</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x1a</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>
<span class="mh">0x400568b0</span><span class="o">:</span>     <span class="mh">0x15</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x33</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>
<span class="mh">0x400568b8</span><span class="o">:</span>     <span class="mh">0x1a</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x09</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>
<span class="mh">0x400568c0</span><span class="o">:</span>     <span class="mh">0x14</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x12</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>
<span class="mh">0x400568c8</span><span class="o">:</span>     <span class="mh">0x13</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x1a</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>
<span class="mh">0x400568d0</span><span class="o">:</span>     <span class="mh">0x0f</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x0b</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>
<span class="mh">0x400568d8</span><span class="o">:</span>     <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x08</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>
<span class="mh">0x400568e0</span><span class="o">:</span>     <span class="mh">0x0d</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x1a</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>
<span class="mh">0x400568e8</span><span class="o">:</span>     <span class="mh">0x1d</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x0b</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>
<span class="mh">0x400568f0</span><span class="o">:</span>     <span class="mh">0x03</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x1a</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>
<span class="mh">0x400568f8</span><span class="o">:</span>     <span class="mh">0x11</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x14</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>
<span class="mh">0x40056900</span><span class="o">:</span>     <span class="mh">0x22</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x13</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>
<span class="mh">0x40056908</span><span class="o">:</span>     <span class="mh">0x01</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x20</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>
<span class="mh">0x40056910</span><span class="o">:</span>     <span class="mh">0x11</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x11</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>
<span class="mh">0x40056918</span><span class="o">:</span>     <span class="mh">0x18</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x1a</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>
<span class="mh">0x40056920</span><span class="o">:</span>     <span class="mh">0x02</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x07</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>
<span class="mh">0x40056928</span><span class="o">:</span>     <span class="mh">0x21</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x0b</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>
<span class="mh">0x40056930</span><span class="o">:</span>     <span class="mh">0x0b</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x1c</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>
<span class="mh">0x40056938</span><span class="o">:</span>     <span class="mh">0xff</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>
<span class="n">gdb</span><span class="o">-</span><span class="n">peda</span><span class="err">$</span> <span class="n">x</span><span class="o">/</span><span class="mi">172</span><span class="n">x</span> <span class="err">$</span><span class="n">r9</span>
<span class="mh">0x40056988</span><span class="o">:</span>     <span class="mh">0x09</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x02</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>
<span class="mh">0x40056990</span><span class="o">:</span>     <span class="mh">0x13</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x05</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>
<span class="mh">0x40056998</span><span class="o">:</span>     <span class="mh">0x1b</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x0d</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>
<span class="mh">0x400569a0</span><span class="o">:</span>     <span class="mh">0x1d</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x1a</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>
<span class="mh">0x400569a8</span><span class="o">:</span>     <span class="mh">0x15</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x33</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>
<span class="mh">0x400569b0</span><span class="o">:</span>     <span class="mh">0x1a</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x09</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>
<span class="mh">0x400569b8</span><span class="o">:</span>     <span class="mh">0x14</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x12</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>
<span class="mh">0x400569c0</span><span class="o">:</span>     <span class="mh">0x13</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x1a</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>
<span class="mh">0x400569c8</span><span class="o">:</span>     <span class="mh">0x0f</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x0b</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>
<span class="mh">0x400569d0</span><span class="o">:</span>     <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x08</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>
<span class="mh">0x400569d8</span><span class="o">:</span>     <span class="mh">0x0d</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x1a</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>
<span class="mh">0x400569e0</span><span class="o">:</span>     <span class="mh">0x1d</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x0b</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>
<span class="mh">0x400569e8</span><span class="o">:</span>     <span class="mh">0x03</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x1a</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>
<span class="mh">0x400569f0</span><span class="o">:</span>     <span class="mh">0x11</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x14</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>
<span class="mh">0x400569f8</span><span class="o">:</span>     <span class="mh">0x22</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x13</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>
<span class="mh">0x40056a00</span><span class="o">:</span>     <span class="mh">0x01</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x20</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>
<span class="mh">0x40056a08</span><span class="o">:</span>     <span class="mh">0x11</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x11</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>
<span class="mh">0x40056a10</span><span class="o">:</span>     <span class="mh">0x18</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x1a</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>
<span class="mh">0x40056a18</span><span class="o">:</span>     <span class="mh">0x02</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x07</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>
<span class="mh">0x40056a20</span><span class="o">:</span>     <span class="mh">0x21</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x0b</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>
<span class="mh">0x40056a28</span><span class="o">:</span>     <span class="mh">0x0b</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x1c</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>
<span class="mh">0x40056a30</span><span class="o">:</span>     <span class="mh">0xff</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>    <span class="mh">0x00</span>
</code></pre></div></div> <p>Thus, by supplying the flag, we have that the first 172 bytes pointed to by <code class="language-plaintext highlighter-rouge">r7</code> and <code class="language-plaintext highlighter-rouge">r9</code> are identical, meaning <code class="language-plaintext highlighter-rouge">bcmp(__s1, __s2, 0xac)</code> is satisfied. We can also observe that <code class="language-plaintext highlighter-rouge">r11</code> contains the contents of our flag, so <code class="language-plaintext highlighter-rouge">puVar2</code> does actually store our input. Finally, <code class="language-plaintext highlighter-rouge">r10</code> does indeed correspond to the length of the input (0x2b), meaning our assumption about <code class="language-plaintext highlighter-rouge">uVar4</code> being the length of the input was correct.</p> <h2 id="flag">Flag</h2> <p>jctf{n0_vM_just_plain_0ld_ru5tb3rry_ch4ll}</p>]]></content><author><name></name></author><category term="CTFs"/><category term="reversing"/><category term="justCTF2023"/><summary type="html"><![CDATA[Rust ARMv7+ reversing]]></summary></entry><entry><title type="html">A neat trick to recover elements in rings with zero divisors</title><link href="https://pwang00.github.io//blog/2022/reduction/" rel="alternate" type="text/html" title="A neat trick to recover elements in rings with zero divisors"/><published>2022-09-21T11:12:00-04:00</published><updated>2022-09-21T11:12:00-04:00</updated><id>https://pwang00.github.io//blog/2022/reduction</id><content type="html" xml:base="https://pwang00.github.io//blog/2022/reduction/"><![CDATA[<p>I recently came across an interesting math problem involving a key exchange protocol over the ring \(\mathbb{Z}/(n)\) where \(n = pq\) for \(p\) and \(q\) prime. The protocol involves two parties, Alice and Bob, and proceeds as follows:</p> <ul> <li>Alice randomly selects \(r_s\) and \(r_a\) from \(\mathbb{Z}/(n)\) with the constraint that \(\gcd(r_a, n) = 1\). She forms her secret \(s = r_sp\) and sends \(P_1 = r_as\) to Bob.</li> <li>Bob randomly selects \(r_b\) from \(\mathbb{Z}/(n)\), also with the constraint that \(\gcd(r_b, n) = 1\). He sends \(P_2 = r_bA\) back to Alice.</li> <li>Alice sends Bob \(P_3 = r_a^{-1}P_2\)</li> <li>Bob obtains Alice’s secret by performing \(s = r_b^{-1}P_3\).</li> </ul> <p>The parameters \(p, q, P_1, P_2, P_3\) are public, while \(r_s, r_a, r_b\) are private.</p> <p>Let’s say Alice and Bob ran this protocol and an eavesdropper, Eve, wanted to compromise their private parameters. Eve might be tempted to multiply \(P_1\) by \(p^{-1}\) and thereby obtain \(s\). Unfortunately for Eve, this immediately fails since \(\mathbb{Z}/(n)\) has zero divisors–namely, any element that is a multiple of \(p\) or \(q\) will have no inverse! This also means that any attempts by Eve to multiply \(P_i\) with \(P_j^{-1}\) to solve for private parameters will also fail, as all \(P_i\) have a factor of \(p\).</p> <p>However, all is not lost for Eve. Recall that \(P_1\) can be expressed as the following congruence: \(P_1 \equiv r_a r_sp \pmod{n}\). By definition, \(P_1 = kn + r_sp = k(pq) + r_ar_sp\). Eve can then treat \(P_1\) as an element of \(\mathbb{Z}\) and compute \(D_1 = P_1/p = kq + r_ar_s\), which is really just \(r_ar_s \pmod{q}\). Eve proceeds identically for \(P_2\) and \(P_3\), obtaining \(D_2 \equiv r_ar_br_s \pmod{q}\) and \(D_3 \equiv r_br_s\pmod{q}\). This “reduction” modulo \(q\) is significant because the ring \(\mathbb{Z}/(q)\) has no zero divisors, meaning every non-zero element is invertible!</p> <p>Eve now has the following system:</p> \[\begin{equation*} \left\{ \begin{aligned} &amp; D_1 \equiv r_a r_s \pmod{q}\\ &amp; D_2 \equiv r_a r_b r_s \pmod{q} \\ &amp; D_3 \equiv r_b r_s \pmod{q}\\ \end{aligned} \right. \end{equation*}\] <p>Eve can solve for \(r_b \pmod{q}\) by computing \(D_1 D_2^{-1} \pmod{q} = (r_a r_b r_s) (r_a r_s)^{-1} \pmod{q}\). Eve also needs to compute \(r_b \pmod{p}\) in order to piece together \(r_b \pmod{n}\); to do this, she creates a similar system</p> \[\begin{equation*} \left\{ \begin{aligned} &amp; D_4 \equiv r_a r_s \pmod{p}\\ &amp; D_5 \equiv r_a r_b r_s \pmod{p} \\ &amp; D_6 \equiv r_b r_s \pmod{p}\\ \end{aligned} \right. \end{equation*}\] <p>and computes \(D_4 D_5^{-1} \pmod{p}\). Eve can then simplify this system to obtain</p> \[\begin{equation*} \left\{ \begin{aligned} &amp; r_b \pmod{p}\\ &amp; r_b \pmod{q}\\ \end{aligned} \right. \end{equation*}\] <p>She then applies the Chinese remainder theorem to obtain \(r_b \pmod{n}\). From here, Eve can trivially recover \(s\) by performing \(r_b^{-1}P_3\).</p> <p>There is actually an even quicker approach that Eve can take to recover \(s\): realize that for \(n = pq\), \(p(a \mod{q}) = pa \pmod{n}\). This is easy to see by definition of \(b \equiv a \pmod{q}\), which means \(b = kq + a\). Therefore \(pb = k(pq) + pa\), and the result follows. In this case, Eve knows that \(P_3\) contains a factor of \(p\), so she can actually perform \(P_3 (r_b^{-1} \pmod{q}) \pmod{n}\) to obtain \(s\).</p> <p>The below script demonstrates both of Eve’s approaches in action:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">random</span>
<span class="kn">from</span> <span class="nn">math</span> <span class="kn">import</span> <span class="n">gcd</span>

<span class="n">q</span> <span class="o">=</span> <span class="n">random_prime</span><span class="p">(</span><span class="mi">1</span><span class="o">&lt;&lt;</span><span class="mi">256</span><span class="p">,</span> <span class="n">proof</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
<span class="n">p</span> <span class="o">=</span> <span class="n">random_prime</span><span class="p">(</span><span class="mi">1</span><span class="o">&lt;&lt;</span><span class="mi">256</span><span class="p">,</span> <span class="n">proof</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
<span class="n">n</span> <span class="o">=</span> <span class="n">p</span> <span class="o">*</span> <span class="n">q</span>


<span class="c1"># Private parameters
</span><span class="n">r_s</span> <span class="o">=</span> <span class="n">random</span><span class="p">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span>
<span class="n">r_a</span> <span class="o">=</span> <span class="mi">0</span>
<span class="n">r_b</span> <span class="o">=</span> <span class="mi">0</span>
<span class="n">s</span> <span class="o">=</span> <span class="p">(</span><span class="n">r_s</span> <span class="o">*</span> <span class="n">p</span><span class="p">)</span> <span class="o">%</span> <span class="n">n</span>

<span class="k">while</span> <span class="n">gcd</span><span class="p">(</span><span class="n">r_a</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">1</span><span class="p">:</span>
    <span class="n">r_a</span> <span class="o">=</span> <span class="n">random</span><span class="p">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span>

<span class="k">while</span> <span class="n">gcd</span><span class="p">(</span><span class="n">r_b</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">1</span><span class="p">:</span>
    <span class="n">r_b</span> <span class="o">=</span> <span class="n">random</span><span class="p">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span>

<span class="c1"># Public parameters
</span><span class="n">P_1</span> <span class="o">=</span> <span class="p">(</span><span class="n">s</span> <span class="o">*</span> <span class="n">r_a</span><span class="p">)</span> <span class="o">%</span> <span class="n">n</span>
<span class="n">P_2</span> <span class="o">=</span> <span class="p">(</span><span class="n">P_1</span> <span class="o">*</span> <span class="n">r_b</span><span class="p">)</span> <span class="o">%</span> <span class="n">n</span>
<span class="n">P_3</span> <span class="o">=</span> <span class="p">(</span><span class="n">P_2</span> <span class="o">*</span> <span class="n">inverse_mod</span><span class="p">(</span><span class="n">r_a</span><span class="p">,</span> <span class="n">n</span><span class="p">))</span> <span class="o">%</span> <span class="n">n</span>

<span class="c1"># Eve stuff
</span><span class="n">D_1</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">P_1</span> <span class="o">/</span> <span class="n">p</span><span class="p">)</span>
<span class="n">D_2</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">P_2</span> <span class="o">/</span> <span class="n">p</span><span class="p">)</span>
<span class="n">D_3</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">P_3</span> <span class="o">/</span> <span class="n">p</span><span class="p">)</span>


<span class="c1">## Approach 1: Chinese Remainder Theorem
</span>
<span class="c1"># Compute r_b modulo p and q
</span><span class="n">rb_mod_p</span> <span class="o">=</span> <span class="p">(</span><span class="n">D_2</span> <span class="o">*</span> <span class="n">inverse_mod</span><span class="p">(</span><span class="n">D_1</span><span class="p">,</span> <span class="n">p</span><span class="p">))</span> <span class="o">%</span> <span class="n">p</span>
<span class="n">rb_mod_q</span> <span class="o">=</span> <span class="p">(</span><span class="n">D_2</span> <span class="o">*</span> <span class="n">inverse_mod</span><span class="p">(</span><span class="n">D_1</span><span class="p">,</span> <span class="n">q</span><span class="p">))</span> <span class="o">%</span> <span class="n">q</span>

<span class="c1"># Piece together r_b (mod n) via the Chinese remainder theorem
</span><span class="n">rb_mod_n</span> <span class="o">=</span> <span class="n">crt</span><span class="p">([</span><span class="n">rb_mod_p</span><span class="p">,</span> <span class="n">rb_mod_q</span><span class="p">],</span> <span class="p">[</span><span class="n">p</span><span class="p">,</span> <span class="n">q</span><span class="p">])</span>

<span class="c1"># Compute the secret via r_b^-1 * P_3, which yields s = p * r_s
</span><span class="n">v</span> <span class="o">=</span> <span class="p">(</span><span class="n">inverse_mod</span><span class="p">(</span><span class="n">rb_mod_n</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span> <span class="o">*</span> <span class="n">P_3</span><span class="p">)</span> <span class="o">%</span> <span class="n">n</span>

<span class="c1">## Approach 2: multiply rb_mod_q by P_3, take modulo n
</span>
<span class="n">v_2</span> <span class="o">=</span> <span class="p">(</span><span class="n">P_3</span> <span class="o">*</span> <span class="n">inverse_mod</span><span class="p">(</span><span class="n">rb_mod_q</span><span class="p">,</span> <span class="n">q</span><span class="p">)</span> <span class="o">%</span> <span class="n">n</span><span class="p">)</span>

<span class="k">assert</span><span class="p">(</span><span class="n">v</span> <span class="o">==</span> <span class="n">v_2</span> <span class="o">==</span> <span class="n">s</span><span class="p">)</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="CTFs"/><category term="cryptography"/><category term="math"/><summary type="html"><![CDATA[Number Theory]]></summary></entry><entry><title type="html">Farm (42) - CryptoCTF</title><link href="https://pwang00.github.io//blog/2022/farm/" rel="alternate" type="text/html" title="Farm (42) - CryptoCTF"/><published>2022-07-22T11:12:00-04:00</published><updated>2022-07-22T11:12:00-04:00</updated><id>https://pwang00.github.io//blog/2022/farm</id><content type="html" xml:base="https://pwang00.github.io//blog/2022/farm/"><![CDATA[<p>Farm was a 42 point challenge on CryptoCTF 2022. I missed the CTF and was only able to download this challenge before the servers went down.</p> <h2 id="solution">Solution</h2> <p>We’re given a ciphertext that’s encoded in what appears to be base64. Taking a look at the <code class="language-plaintext highlighter-rouge">keygen</code> function, we see</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">keygen</span><span class="p">(</span><span class="n">l</span><span class="p">):</span>
    <span class="n">key</span> <span class="o">=</span> <span class="p">[</span><span class="n">F</span><span class="p">[</span><span class="n">randint</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">63</span><span class="p">)]</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">l</span><span class="p">)]</span> 
    <span class="n">key</span> <span class="o">=</span> <span class="n">prod</span><span class="p">(</span><span class="n">key</span><span class="p">)</span> <span class="c1"># Optimization the key length :D
</span>    <span class="k">return</span> <span class="n">key</span>
</code></pre></div></div> <p>So the keygen samples elements from the finite field \(\mathbb{F}_{2^6}\) and multiplies them together to form a supposedly larger key. However, multiplication of two field elements just produces another one; in \(\mathbb{F}_{2^6}\) there are only 63 possible keys excluding 0. The keyspace is tiny, so we can just brute force each character in the plaintext character by character with every possible key until we get one that decodes to valid ASCII. The resulting code is super ugly and probably not the best approach, but works:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">sage.all</span> <span class="kn">import</span> <span class="o">*</span>
<span class="kn">import</span> <span class="nn">string</span><span class="p">,</span> <span class="n">base64</span><span class="p">,</span> <span class="n">math</span>

<span class="n">ALPHABET</span> <span class="o">=</span> <span class="n">string</span><span class="p">.</span><span class="n">printable</span><span class="p">[:</span><span class="mi">62</span><span class="p">]</span> <span class="o">+</span> <span class="s">'</span><span class="se">\\</span><span class="s">='</span>
<span class="n">F</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">GF</span><span class="p">(</span><span class="mi">64</span><span class="p">))</span>
<span class="n">ctext</span> <span class="o">=</span> <span class="sa">b</span><span class="s">"805c9GMYuD5RefTmabUNfS9N9YrkwbAbdZE0df91uCEytcoy9FDSbZ8Ay8jj"</span>

<span class="k">def</span> <span class="nf">solve</span><span class="p">(</span><span class="n">enc</span><span class="p">):</span>
    <span class="n">candidates</span> <span class="o">=</span> <span class="p">[]</span>

    <span class="n">decoded</span> <span class="o">=</span> <span class="bp">None</span>
    <span class="k">for</span> <span class="n">key</span> <span class="ow">in</span> <span class="n">F</span><span class="p">[</span><span class="mi">1</span><span class="p">:]:</span>
        <span class="n">plain</span> <span class="o">=</span> <span class="s">""</span>
        <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">while</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">ctext</span><span class="p">):</span>
            <span class="n">old_i</span> <span class="o">=</span> <span class="n">i</span>
            <span class="k">for</span> <span class="n">char</span> <span class="ow">in</span> <span class="n">ALPHABET</span><span class="p">:</span>
                <span class="k">if</span> <span class="n">encrypt_char</span><span class="p">(</span><span class="n">char</span><span class="p">,</span> <span class="n">key</span><span class="p">)</span> <span class="o">==</span> <span class="nb">chr</span><span class="p">(</span><span class="n">ctext</span><span class="p">[</span><span class="n">i</span><span class="p">]):</span>
                    <span class="n">plain</span> <span class="o">+=</span> <span class="n">char</span>
                    <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
                    <span class="k">break</span>

            <span class="k">if</span> <span class="n">old_i</span> <span class="o">==</span> <span class="n">i</span><span class="p">:</span>
                <span class="k">break</span>

        <span class="n">candidates</span> <span class="o">+=</span> <span class="p">[</span><span class="n">plain</span><span class="p">]</span>
    

    <span class="k">for</span> <span class="n">cand</span> <span class="ow">in</span> <span class="n">candidates</span><span class="p">:</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">decoded</span> <span class="o">=</span> <span class="n">base64</span><span class="p">.</span><span class="n">b64decode</span><span class="p">(</span><span class="n">cand</span><span class="p">)</span>
            <span class="k">if</span> <span class="sa">b</span><span class="s">"CCTF{"</span> <span class="ow">in</span> <span class="n">decoded</span><span class="p">:</span>
                <span class="k">break</span>
        <span class="k">except</span><span class="p">:</span>
            <span class="k">continue</span>


    <span class="k">return</span> <span class="n">decoded</span>

<span class="k">def</span> <span class="nf">maptofarm</span><span class="p">(</span><span class="n">c</span><span class="p">):</span>
    <span class="k">assert</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">ALPHABET</span>
    <span class="k">return</span> <span class="n">F</span><span class="p">[</span><span class="n">ALPHABET</span><span class="p">.</span><span class="n">index</span><span class="p">(</span><span class="n">c</span><span class="p">)]</span>

<span class="k">def</span> <span class="nf">invert</span><span class="p">(</span><span class="n">k</span><span class="p">):</span>
    <span class="k">assert</span> <span class="n">k</span> <span class="ow">in</span> <span class="n">F</span><span class="p">:</span>
    <span class="k">return</span> <span class="n">ALPHABET</span><span class="p">[</span><span class="n">F</span><span class="p">.</span><span class="ow">in</span><span class="p">]</span>

<span class="k">def</span> <span class="nf">encrypt_char</span><span class="p">(</span><span class="n">m</span><span class="p">,</span> <span class="n">key</span><span class="p">):</span>
    <span class="n">pkey</span> <span class="o">=</span> <span class="n">key</span><span class="o">**</span><span class="mi">5</span> <span class="o">+</span> <span class="n">key</span><span class="o">**</span><span class="mi">3</span> <span class="o">+</span> <span class="n">key</span><span class="o">**</span><span class="mi">2</span> <span class="o">+</span> <span class="mi">1</span>
    <span class="k">return</span> <span class="n">ALPHABET</span><span class="p">[</span><span class="n">F</span><span class="p">.</span><span class="n">index</span><span class="p">(</span><span class="n">pkey</span> <span class="o">*</span> <span class="n">maptofarm</span><span class="p">(</span><span class="n">m</span><span class="p">))]</span>

<span class="k">def</span> <span class="nf">keygen</span><span class="p">(</span><span class="n">l</span><span class="p">):</span>
    <span class="n">key</span> <span class="o">=</span> <span class="p">[</span><span class="n">F</span><span class="p">[</span><span class="n">randint</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">63</span><span class="p">)]</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">l</span><span class="p">)]</span> 
    <span class="n">key</span> <span class="o">=</span> <span class="n">prod</span><span class="p">(</span><span class="n">key</span><span class="p">)</span> <span class="c1"># Optimization the key length :D
</span>    <span class="k">return</span> <span class="n">key</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">"__main__"</span><span class="p">:</span>
    <span class="n">res</span> <span class="o">=</span> <span class="n">solve</span><span class="p">(</span><span class="n">ctext</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="n">res</span><span class="p">)</span>
</code></pre></div></div> <p>Running it produces the flag <code class="language-plaintext highlighter-rouge">CCTF{EnCrYp7I0n_4nD_5u8STitUtIn9_iN_Fi3Ld!}</code>.</p>]]></content><author><name></name></author><category term="CTFs"/><category term="cryptography"/><category term="math"/><summary type="html"><![CDATA[Finite Fields]]></summary></entry><entry><title type="html">Happy (242) - Tokyo Westerns Qualifiers</title><link href="https://pwang00.github.io//blog/2019/happy/" rel="alternate" type="text/html" title="Happy (242) - Tokyo Westerns Qualifiers"/><published>2019-09-06T11:12:00-04:00</published><updated>2019-09-06T11:12:00-04:00</updated><id>https://pwang00.github.io//blog/2019/happy</id><content type="html" xml:base="https://pwang00.github.io//blog/2019/happy/"><![CDATA[<p>Happy was a 242 point crypto challenge on the 2019 Tokyo Westerns Qualifiers.</p> <h2 id="problem-description">Problem Description</h2> <p>No, we’Re not SAd. We are Happy!</p> <h2 id="solution">Solution</h2> <p>The problem description makes it pretty clear that this challenge is RSA. Indeed, we are given 3 files of importance: happy (.rb), pub.key, and flag.enc. We open happy.rb and find the definition of a custom defined Key class, which we figure out to be an implementation of multi-prime RSA (N = pq^k) (as shown below):</p> <div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">return</span> <span class="no">Key</span><span class="p">.</span><span class="nf">new</span><span class="p">({</span>
    <span class="ss">n: </span><span class="nb">p</span> <span class="o">*</span> <span class="n">q</span> <span class="o">**</span> <span class="n">k</span><span class="p">,</span>
    <span class="ss">e: </span><span class="n">e</span><span class="p">,</span>
    <span class="ss">p: </span><span class="nb">p</span><span class="p">,</span>
    <span class="ss">q: </span><span class="n">q</span> <span class="o">**</span> <span class="n">k</span><span class="p">,</span>
    <span class="ss">d1: </span><span class="n">d1</span><span class="p">,</span>
    <span class="ss">d2: </span><span class="n">d2</span><span class="p">,</span>
    <span class="ss">cf: </span><span class="n">cf</span><span class="p">,</span>
<span class="p">})</span>
</code></pre></div></div> <p>Additionally, we note that the following lines are important:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def self.import(str)
    Key.new(Marshal.load(str))
</code></pre></div></div> <p>So we can safely deduce here that the pub.key file is a serialized public key that is deserialized and parsed by the key class. Deserializing the pub.key file yields the following parameters:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>irb(main):001:0&gt; Marshal.load(File.binread("pub.key"))                                                  
=&gt; {:n=&gt;5452318773620154613572502669913080727339917760196646730652258556145398937256752632887555812737783373177353194432136071770417979324393263857781686277601413222025718171529583036919918011865659343346014570936822522629937049429335236497295742667600448744568785484756006127827416640477334307947919462834229613581880109765730148235236895292544500644206990455843770003104212381715712438639535055758354549980537386992998458659247267900481624843632733660905364361623292713318244751154245275273626636275353542053068704371642619745495065026372136566314951936609049754720223393857083115230045986813313700617859091898623345607326632849260775745046701800076472162843326078037832455202509171395600120638911, :e=&gt;65537, :cf=&gt;25895436290109491245101531425889639027975222438101136560069483392652360882638128551753089068088836092997653443539010850513513345731351755050869585867372758989503310550889044437562615852831901962404615732967948739458458871809980240507942550191679140865230350818204637158480970417486015745968144497190368319745738055768539323638032585508830680271618024843807412695197298088154193030964621282487334463994562290990124211491040392961841681386221639304429670174693151}
</code></pre></div></div> <p>Interesting–normally, an RSA public key would contain only \((N, e)\). The <code class="language-plaintext highlighter-rouge">cf</code> parameter certainly doesn’t seem to match any known implementation of RSA, so we assume for now that it’s an arbitrary parameter.</p> <p>Going back to the code, we find that <code class="language-plaintext highlighter-rouge">cf = p.pow(q ** (k - 1) * (q - 1) - 1, q ** k)</code>–in other words, \(cf \equiv p^{q^{(k - 1)}(q - 1) - 1} \pmod{q^k}\)</p> <p>We aren’t explicitly given \(k\), but we can deduce that \(k = 2\), since we know \(p\) and \(q\) are both \(b\)-bit long primes, \(N = pq^k\) has a bit length of 2295, and \(q^k\) has a bit length of 1530, so we can simply divide by 3 to get the bit length of each prime factor (765) and obtain 1530/765 = 2. With \(k = 2\), we can simplify our above equation to obtain \(cf \equiv p^{\phi(q^2) - 1} \pmod{q^2}\), and through Euler’s theorem, \(cf \equiv p^{-1} \pmod{q^2}\). In its current form, \(cf\) isn’t super useful since the only information we have on \(p\) is in the form of its inverse, but we can multiply both sides of the equation by \(p^2\) to obtain \((cf \cdot p - 1)p \equiv 0 \pmod{N}\). We multiply by \(p^2\) because we want to form a polynomial in \(p\) over \(\mathbb{Z}/(N)\), where we know \(N\):</p> \[cf \cdot p \equiv 1 \pmod{q^2}\] \[\implies cf \cdot p - 1 \equiv 0 \pmod{q^2}\] \[\implies cf \cdot p - 1 = kq^2\] <p>for some integer \(k\). So multiplying by an additional factor of \(p\) allows us to obtain</p> <p>\((cf \cdot p - 1)p = kpq^2 = kN\).</p> <p>This is equivalent to saying that</p> <p>\((cf \cdot p - 1)p \equiv 0 \pmod{N}\).</p> <p>From here, we can use Coppersmith’s algorithm to solve for \(p\).</p> <p>The code to do this is as follows:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">n</span> <span class="o">=</span> <span class="mi">5452318773620154613572502669913080727339917760196646730652258556145398937256752632887555812737783373177353194432136071770417979324393263857781686277601413222025718171529583036919918011865659343346014570936822522629937049429335236497295742667600448744568785484756006127827416640477334307947919462834229613581880109765730148235236895292544500644206990455843770003104212381715712438639535055758354549980537386992998458659247267900481624843632733660905364361623292713318244751154245275273626636275353542053068704371642619745495065026372136566314951936609049754720223393857083115230045986813313700617859091898623345607326632849260775745046701800076472162843326078037832455202509171395600120638911</span>
<span class="n">cf</span> <span class="o">=</span> <span class="mi">25895436290109491245101531425889639027975222438101136560069483392652360882638128551753089068088836092997653443539010850513513345731351755050869585867372758989503310550889044437562615852831901962404615732967948739458458871809980240507942550191679140865230350818204637158480970417486015745968144497190368319745738055768539323638032585508830680271618024843807412695197298088154193030964621282487334463994562290990124211491040392961841681386221639304429670174693151</span>

<span class="n">P</span><span class="p">.</span><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span> <span class="o">=</span> <span class="n">PolynomialRing</span><span class="p">(</span><span class="n">Zmod</span><span class="p">(</span><span class="n">n</span><span class="p">))</span>

<span class="n">f</span> <span class="o">=</span> <span class="p">(</span><span class="n">cf</span> <span class="o">*</span> <span class="n">p</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="n">p</span>

<span class="n">roots</span> <span class="o">=</span> <span class="n">f</span><span class="p">.</span><span class="n">monic</span><span class="p">().</span><span class="n">small_roots</span><span class="p">()</span>
<span class="k">print</span><span class="p">(</span><span class="n">roots</span><span class="p">)</span>

<span class="c1"># [0, 166878663790065040663149504970052368124427462024107500159158464138407657299730521908976684364578086644682045134207945137293534705688910696520830729908263578233018529387676221035298300775812585471932551347478303730822844748034186479]
</span></code></pre></div></div> <p>We see 2 results: 0 is a trivial root, so we can discard it, but we find out that the second value <code class="language-plaintext highlighter-rouge">166878663790065040663149504970052368124427462024107500159158464138407657299730521908976684364578086644682045134207945137293534705688910696520830729908263578233018529387676221035298300775812585471932551347478303730822844748034186479</code> divides N!</p> <p>Thus, we have found \(p\), and finding \(q\) is simply a matter of computing \(\sqrt{N / p}\). From here, computing \(\phi(N)\) and \(d\) is easy. However, the flag is padded with PKCS1_OAEP, so we have to PKCS1_OAEP unpad it to recover the original plaintext. We ran into incorrect decryption errors when trying to use pycrypto’s PKCS1_OAEP, and since we were sure all our recovered parameters were correct, we switched to the <em>cryptography</em> module for the last part of the challenge.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">key</span> <span class="o">=</span> <span class="n">RSA</span><span class="p">.</span><span class="n">construct</span><span class="p">((</span><span class="nb">long</span><span class="p">(</span><span class="n">n</span><span class="p">),</span> <span class="nb">long</span><span class="p">(</span><span class="n">e</span><span class="p">),</span> <span class="nb">long</span><span class="p">(</span><span class="n">d</span><span class="p">)))</span>

<span class="n">final_key</span> <span class="o">=</span> <span class="n">load_pem_private_key</span><span class="p">(</span>
		<span class="n">key</span><span class="p">.</span><span class="n">exportKey</span><span class="p">(),</span>
		<span class="n">password</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> 
		<span class="n">backend</span><span class="o">=</span><span class="n">default_backend</span><span class="p">()</span>
		<span class="p">)</span>

<span class="n">flag</span> <span class="o">=</span> <span class="n">final_key</span><span class="p">.</span><span class="n">decrypt</span><span class="p">(</span>
		<span class="n">c</span><span class="p">,</span>
		<span class="n">padding</span><span class="p">.</span><span class="n">OAEP</span><span class="p">(</span>
			<span class="n">mgf</span><span class="o">=</span><span class="n">padding</span><span class="p">.</span><span class="n">MGF1</span><span class="p">(</span><span class="n">algorithm</span><span class="o">=</span><span class="n">hashes</span><span class="p">.</span><span class="n">SHA1</span><span class="p">()),</span>
			<span class="n">algorithm</span><span class="o">=</span><span class="n">hashes</span><span class="p">.</span><span class="n">SHA1</span><span class="p">(),</span>
			<span class="n">label</span><span class="o">=</span><span class="bp">None</span>
			<span class="p">)</span>
		<span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">flag</span><span class="p">)</span>
</code></pre></div></div> <p>Running this produces the flag <code class="language-plaintext highlighter-rouge">TWCTF{I_m_not_sad__I_m_happy_always}</code>.</p> <p>The full code from start to finish can be found in solution.sage (install required libraries through <code class="language-plaintext highlighter-rouge">sage -pip install cryptography pycrypto</code> beforehand).</p> <h2 id="flag">Flag</h2> <p>TWCTF{I_m_not_sad__I_m_happy_always}</p>]]></content><author><name></name></author><category term="CTFs"/><category term="cryptography"/><category term="math"/><summary type="html"><![CDATA[Coppersmith's attack]]></summary></entry><entry><title type="html">ECC 2 (200) - PicoCTF 2017</title><link href="https://pwang00.github.io//blog/2017/ECC2/" rel="alternate" type="text/html" title="ECC 2 (200) - PicoCTF 2017"/><published>2017-04-17T11:12:00-04:00</published><updated>2017-04-17T11:12:00-04:00</updated><id>https://pwang00.github.io//blog/2017/ECC2</id><content type="html" xml:base="https://pwang00.github.io//blog/2017/ECC2/"><![CDATA[<p>ECC 2 was a 200 point challenge on PicoCTF 2017.</p> <p>We are given the following handout:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Elliptic Curve: y^2 = x^3 + A*x + B mod M
M = 93556643250795678718734474880013829509320385402690660619699653921022012489089
A = 66001598144012865876674115570268990806314506711104521036747533612798434904785
B = *You can figure this out with the point below :)*

P = (56027910981442853390816693056740903416379421186644480759538594137486160388926, 65533262933617146434438829354623658858649726233622196512439589744498050226926)
n = *SECRET*
n*P = (61124499720410964164289905006830679547191538609778446060514645905829507254103, 2595146854028317060979753545310334521407008629091560515441729386088057610440)

n &lt; 400000000000000000000000000000

Find n.
</code></pre></div></div> <p>Our first step will be to solve for \(b\) via rearranging the elliptic curve equation:</p> \[y^2 = x^3 + ax + b\bmod n\] \[b = y^2 - x^3 - ax\bmod n\] <p>In Sage, this is done via substituting the \(x\) and \(y\) values as shown:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sage: x, y = P[0], P[1]
sage: b = (y^2 - x^3 - a*x) % N  #The ^ operator is exponentiation instead of XOR in Sage.
sage: print(b)
25255205054024371783896605039267101837972419055969636393425590261926131199030
</code></pre></div></div> <p>Solving for \(b\), we obtain 25255205054024371783896605039267101837972419055969636393425590261926131199030.</p> <p>We now have all the necessary parameters for the elliptic curve. Thus, our next step is to define the curve over a finite field of integers modulo \(M\), and define the points \(P\) and \(Q\) to be on the curve:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>F = FiniteField(M)
E = EllipticCurve(F,[A,B])
P = E.point(P)
Q = E.point(Q)
</code></pre></div></div> <p>Essentially, this challenge requires us to solve the Elliptic Curve Discrete Logarithm Problem (ECDLP): compute the scalar \(n\) given the base point \(P\) and the product point \(Q\) where \(Q = nP\). There are a few known attacks against ECDLP, including the:</p> <ol> <li>MOV attack (involves finding linearly independent points and calculating Weil pairing to reduce ECDLP to over finite field instead of group of points on elliptic curve)</li> <li>Pohlig-Hellman (reduces discrete logarithm calculations to prime subgroups of the order of P and uses Chinese Remainder Theorem to solve system of congruences for discrete logarithm of the whole order )</li> </ol> <p>We can rule out the MOV attack, since it is infeasible given the size of the elliptic curve order. However, factoring the order of our elliptic curve \(E\) reveals many small prime factors, indicating that Pohlig-Hellman could be feasible:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sage: factor(E.order())
2^2 * 3 * 5 * 7 * 137 * 593 * 24337 * 25589 * 3637793 * 5733569 * 106831998530025000830453 * 1975901744727669147699767  
</code></pre></div></div> <p>The goal of Pohlig-Hellman and the mathematics leading to it is as follows:</p> <p>We are attempting to recreate a system of congruences to solve for the value of \(l\) (referred to as \(n\) in this problem):</p> \[l \equiv l_1\pmod{p_1^{e_1}}\] \[l \equiv l_2\pmod{p_2^{e_2}}\] \[\ldots\] \[l \equiv l_i\pmod{p_i^{e_i}}\] <p>where \(l\) denotes the discrete logarithm for the order of \(P\), \(l_i\) denotes discrete logarithm calculations for each of the smaller prime orders (factors) \(p\) of \(P\), and \(e_i\) denotes the exponent of \(p\).</p> <p>First, define an integer \(x\) such that \(x = p_1^{e_1}p_2^{e_2}...p_{r}^{e_r}\) (in other words, \(x\) is equivalent to the order of \(P\)).</p> <p>\(l_i\) can be written in the form:</p> <p>\(l_i = z_0 + z_1\,p + z_2\,p_2 + ... + z_{e−1}p-1^{e-1}\\\) where \(z \in [0,\,p-1]\).</p> <p>We then define the points \(P_i = \frac{x}{p_i}P\), and \(Q_i = \frac{x}{p_i}Q\).</p> <p>Since we know that the order of \(P_i\) is \(p_i\), we can rewrite the equation as \(Q_i = lP_i = z_iP_i\), we can now solve for every \(z_0...z_{e-1}\) by finding a value for \(z_i\) such that \(Q_i = z_i*P_i\).</p> <p>This is comparable to brute force in that if the value of \(p\) is small enough, it is feasible to try all the values of \(z\) in range of \(e\) until a value which satisfies the equation above is found.</p> <p>In Sage, this can be done as follows:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sage</span><span class="p">:</span> <span class="n">primes</span> <span class="o">=</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">137</span><span class="p">,</span> <span class="mi">593</span><span class="p">,</span> <span class="mi">24337</span><span class="p">,</span> <span class="mi">25589</span><span class="p">,</span> <span class="mi">3637793</span><span class="p">,</span> <span class="mi">5733569</span><span class="p">,</span> <span class="mi">106831998530025000830453</span><span class="p">,</span> <span class="mi">1975901744727669147699767</span><span class="p">]</span>
<span class="n">sage</span><span class="p">:</span> <span class="n">dlogs</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">sage</span><span class="p">:</span> <span class="k">for</span> <span class="n">fac</span> <span class="ow">in</span> <span class="n">primes</span><span class="p">:</span>
          <span class="n">t</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">P</span><span class="p">.</span><span class="n">order</span><span class="p">())</span> <span class="o">/</span> <span class="nb">int</span><span class="p">(</span><span class="n">fac</span><span class="p">)</span>
          <span class="n">dlog</span> <span class="o">=</span> <span class="n">discrete_log</span><span class="p">(</span><span class="n">t</span><span class="o">*</span><span class="n">Q</span><span class="p">,</span><span class="n">t</span><span class="o">*</span><span class="n">P</span><span class="p">,</span><span class="n">operation</span><span class="o">=</span><span class="s">"+"</span><span class="p">)</span>
          <span class="n">dlogs</span> <span class="o">+=</span> <span class="p">[</span><span class="n">dlog</span><span class="p">]</span>
          <span class="k">print</span><span class="p">(</span><span class="s">"factor: "</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">fac</span><span class="p">)</span><span class="o">+</span><span class="s">", Discrete Log: "</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">dlog</span><span class="p">))</span> <span class="c1">#calculates discrete logarithm for each prime order
</span>
<span class="n">factor</span><span class="p">:</span> <span class="mi">4</span><span class="p">,</span> <span class="n">dlog</span><span class="p">:</span> <span class="mi">2</span>
<span class="n">factor</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="n">dlog</span><span class="p">:</span> <span class="mi">1</span>
<span class="n">factor</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span> <span class="n">dlog</span><span class="p">:</span> <span class="mi">4</span>
<span class="n">factor</span><span class="p">:</span> <span class="mi">7</span><span class="p">,</span> <span class="n">dlog</span><span class="p">:</span> <span class="mi">1</span>
<span class="n">factor</span><span class="p">:</span> <span class="mi">137</span><span class="p">,</span> <span class="n">dlog</span><span class="p">:</span> <span class="mi">129</span>
<span class="n">factor</span><span class="p">:</span> <span class="mi">593</span><span class="p">,</span> <span class="n">dlog</span><span class="p">:</span> <span class="mi">224</span>
<span class="n">factor</span><span class="p">:</span> <span class="mi">24337</span><span class="p">,</span> <span class="n">dlog</span><span class="p">:</span> <span class="mi">5729</span>
<span class="n">factor</span><span class="p">:</span> <span class="mi">25589</span><span class="p">,</span> <span class="n">dlog</span><span class="p">:</span> <span class="mi">13993</span>
<span class="n">factor</span><span class="p">:</span> <span class="mi">3637793</span><span class="p">,</span> <span class="n">dlog</span><span class="p">:</span> <span class="mi">1730599</span>
<span class="n">factor</span><span class="p">:</span> <span class="mi">5733569</span><span class="p">,</span> <span class="n">dlog</span><span class="p">:</span> <span class="mi">4590572</span>

</code></pre></div></div> <p>You will notice that Sage hangs while computing the discrete logarithms for last 2 prime factors. However, we don’t need to know them, since in the problem statement, \(l\) was defined to be less than 400000000000000000000000000000. Multiplying every prime order save for the last 2 returns a boundary of 443208349730265573969192476820, meaning that \(l\) fits within the bound!</p> <p>Our final step is just to solve for \(l\) via CRT:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sage: l = crt(dlogs.primes[:-2])
152977126447386808276536247114
</code></pre></div></div> <p>which returns the value for \(l\)!</p> <p>Just to check the validity of \(l\), we perform a quick boolean comparison;</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sage: l * P == Q
True
</code></pre></div></div> <p>Thus, our value of \(l\) is indeed correct!</p> <h3 id="flag">Flag</h3> <p>152977126447386808276536247114</p> <p>Note: due to random problem generation, your value may be different.</p> <h3 id="full-code">Full code</h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">M</span> <span class="o">=</span> <span class="mi">93556643250795678718734474880013829509320385402690660619699653921022012489089</span>
<span class="n">A</span> <span class="o">=</span> <span class="mi">66001598144012865876674115570268990806314506711104521036747533612798434904785</span>
<span class="n">B</span> <span class="o">=</span> <span class="mi">25255205054024371783896605039267101837972419055969636393425590261926131199030</span>
<span class="n">P</span> <span class="o">=</span> <span class="p">(</span><span class="mi">56027910981442853390816693056740903416379421186644480759538594137486160388926</span><span class="p">,</span> <span class="mi">65533262933617146434438829354623658858649726233622196512439589744498050226926</span><span class="p">)</span>
<span class="n">Q</span> <span class="o">=</span> <span class="p">(</span><span class="mi">61124499720410964164289905006830679547191538609778446060514645905829507254103</span><span class="p">,</span> <span class="mi">2595146854028317060979753545310334521407008629091560515441729386088057610440</span><span class="p">)</span>
<span class="n">F</span> <span class="o">=</span> <span class="n">FiniteField</span><span class="p">(</span><span class="n">M</span><span class="p">)</span>
<span class="n">E</span> <span class="o">=</span> <span class="n">EllipticCurve</span><span class="p">(</span><span class="n">F</span><span class="p">,[</span><span class="n">A</span><span class="p">,</span><span class="n">B</span><span class="p">])</span>
<span class="n">P</span> <span class="o">=</span> <span class="n">E</span><span class="p">.</span><span class="n">point</span><span class="p">(</span><span class="n">P</span><span class="p">)</span>
<span class="n">Q</span> <span class="o">=</span> <span class="n">E</span><span class="p">.</span><span class="n">point</span><span class="p">(</span><span class="n">Q</span><span class="p">)</span>
<span class="n">factors</span><span class="p">,</span> <span class="n">exponents</span> <span class="o">=</span> <span class="nb">zip</span><span class="p">(</span><span class="o">*</span><span class="n">factor</span><span class="p">(</span><span class="n">E</span><span class="p">.</span><span class="n">order</span><span class="p">()))</span>
<span class="n">primes</span> <span class="o">=</span> <span class="p">[</span><span class="n">factors</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">^</span> <span class="n">exponents</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">factors</span><span class="p">))][:</span><span class="o">-</span><span class="mi">2</span><span class="p">]</span>
<span class="n">dlogs</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">fac</span> <span class="ow">in</span> <span class="n">primes</span><span class="p">:</span>
    <span class="n">t</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">P</span><span class="p">.</span><span class="n">order</span><span class="p">())</span> <span class="o">/</span> <span class="nb">int</span><span class="p">(</span><span class="n">fac</span><span class="p">)</span>
    <span class="n">dlog</span> <span class="o">=</span> <span class="n">discrete_log</span><span class="p">(</span><span class="n">t</span><span class="o">*</span><span class="n">Q</span><span class="p">,</span><span class="n">t</span><span class="o">*</span><span class="n">P</span><span class="p">,</span><span class="n">operation</span><span class="o">=</span><span class="s">"+"</span><span class="p">)</span>
    <span class="n">dlogs</span> <span class="o">+=</span> <span class="p">[</span><span class="n">dlog</span><span class="p">]</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"factor: "</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">fac</span><span class="p">)</span><span class="o">+</span><span class="s">", Discrete Log: "</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">dlog</span><span class="p">))</span> <span class="c1">#calculates discrete logarithm for each prime order
</span>
<span class="n">l</span> <span class="o">=</span> <span class="n">crt</span><span class="p">(</span><span class="n">dlogs</span><span class="p">,</span><span class="n">primes</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">l</span><span class="p">)</span>
</code></pre></div></div> <h3 id="resources">Resources</h3> <ul> <li><a href="http://wstein.org/edu/2010/414/projects/novotney.pdf">http://wstein.org/edu/2010/414/projects/novotney.pdf</a></li> <li><a href="https://koclab.cs.ucsb.edu/teaching/ecc/project/2015Projects/Sommerseth+Hoeiland.pdf">https://koclab.cs.ucsb.edu/teaching/ecc/project/2015Projects/Sommerseth+Hoeiland.pdf</a></li> </ul>]]></content><author><name></name></author><category term="CTFs"/><category term="cryptography"/><category term="math"/><summary type="html"><![CDATA[Pohlig-Hellman]]></summary></entry></feed>